from Utility.KeyStoreHandler import KeyStoreHandler
from OpenSSL import crypto

"""
This class handles the responsibilies of the Certificate Authority.
Currently it only issues certificates
"""
class CertificateAuthority():
    def __init__(self,req):
        self.cert = ""
        self.req = req

    """
    Returns the certificate generated by the CA
    :return certificate
    """
    def getCert(self):
        return self.getCert()

    """
    This function signs the CSR request using the CA's private key,
    to generate a certificate for the requester.
    :return Certificate
    """
    def sign(self):
        keystore = KeyStoreHandler()
        CA = keystore.loadCertificate()
        CAPK = keystore.loadPrivateKey()

        cert = crypto.X509()
        cert.gmtime_adj_notBefore(0)
        cert.gmtime_adj_notAfter(60*24*360)
        cert.set_issuer(CA.get_subject())
        cert.set_subject(self.req.get_subject())
        cert.set_pubkey(self.req.get_pubkey())
        cert.sign(CAPK,"sha256")
        keystore.importCert(cert)
        return cert

    """
    This function will verify incoming CSRs recieved from the RA
    """
    def verify(self):
        pass

    """
    This function will print certificates in a Pem format
    """
    def print(self):
        pass
